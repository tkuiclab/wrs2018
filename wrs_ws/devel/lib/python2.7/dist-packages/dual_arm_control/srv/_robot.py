# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dual_arm_control/robotRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robotRequest(genpy.Message):
  _md5sum = "bb58b233829e057866371dd14661701c"
  _type = "dual_arm_control/robotRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 slide_R
float32 joint1_R
float32 joint2_R
float32 joint3_R
float32 joint4_R
float32 joint5_R
float32 joint6_R
float32 joint7_R
float32 gripper_R
float32 slide_L
float32 joint1_L
float32 joint2_L
float32 joint3_L
float32 joint4_L
float32 joint5_L
float32 joint6_L
float32 joint7_L
float32 gripper_L
"""
  __slots__ = ['slide_R','joint1_R','joint2_R','joint3_R','joint4_R','joint5_R','joint6_R','joint7_R','gripper_R','slide_L','joint1_L','joint2_L','joint3_L','joint4_L','joint5_L','joint6_L','joint7_L','gripper_L']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       slide_R,joint1_R,joint2_R,joint3_R,joint4_R,joint5_R,joint6_R,joint7_R,gripper_R,slide_L,joint1_L,joint2_L,joint3_L,joint4_L,joint5_L,joint6_L,joint7_L,gripper_L

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robotRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.slide_R is None:
        self.slide_R = 0.
      if self.joint1_R is None:
        self.joint1_R = 0.
      if self.joint2_R is None:
        self.joint2_R = 0.
      if self.joint3_R is None:
        self.joint3_R = 0.
      if self.joint4_R is None:
        self.joint4_R = 0.
      if self.joint5_R is None:
        self.joint5_R = 0.
      if self.joint6_R is None:
        self.joint6_R = 0.
      if self.joint7_R is None:
        self.joint7_R = 0.
      if self.gripper_R is None:
        self.gripper_R = 0.
      if self.slide_L is None:
        self.slide_L = 0.
      if self.joint1_L is None:
        self.joint1_L = 0.
      if self.joint2_L is None:
        self.joint2_L = 0.
      if self.joint3_L is None:
        self.joint3_L = 0.
      if self.joint4_L is None:
        self.joint4_L = 0.
      if self.joint5_L is None:
        self.joint5_L = 0.
      if self.joint6_L is None:
        self.joint6_L = 0.
      if self.joint7_L is None:
        self.joint7_L = 0.
      if self.gripper_L is None:
        self.gripper_L = 0.
    else:
      self.slide_R = 0.
      self.joint1_R = 0.
      self.joint2_R = 0.
      self.joint3_R = 0.
      self.joint4_R = 0.
      self.joint5_R = 0.
      self.joint6_R = 0.
      self.joint7_R = 0.
      self.gripper_R = 0.
      self.slide_L = 0.
      self.joint1_L = 0.
      self.joint2_L = 0.
      self.joint3_L = 0.
      self.joint4_L = 0.
      self.joint5_L = 0.
      self.joint6_L = 0.
      self.joint7_L = 0.
      self.gripper_L = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18f().pack(_x.slide_R, _x.joint1_R, _x.joint2_R, _x.joint3_R, _x.joint4_R, _x.joint5_R, _x.joint6_R, _x.joint7_R, _x.gripper_R, _x.slide_L, _x.joint1_L, _x.joint2_L, _x.joint3_L, _x.joint4_L, _x.joint5_L, _x.joint6_L, _x.joint7_L, _x.gripper_L))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.slide_R, _x.joint1_R, _x.joint2_R, _x.joint3_R, _x.joint4_R, _x.joint5_R, _x.joint6_R, _x.joint7_R, _x.gripper_R, _x.slide_L, _x.joint1_L, _x.joint2_L, _x.joint3_L, _x.joint4_L, _x.joint5_L, _x.joint6_L, _x.joint7_L, _x.gripper_L,) = _get_struct_18f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18f().pack(_x.slide_R, _x.joint1_R, _x.joint2_R, _x.joint3_R, _x.joint4_R, _x.joint5_R, _x.joint6_R, _x.joint7_R, _x.gripper_R, _x.slide_L, _x.joint1_L, _x.joint2_L, _x.joint3_L, _x.joint4_L, _x.joint5_L, _x.joint6_L, _x.joint7_L, _x.gripper_L))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.slide_R, _x.joint1_R, _x.joint2_R, _x.joint3_R, _x.joint4_R, _x.joint5_R, _x.joint6_R, _x.joint7_R, _x.gripper_R, _x.slide_L, _x.joint1_L, _x.joint2_L, _x.joint3_L, _x.joint4_L, _x.joint5_L, _x.joint6_L, _x.joint7_L, _x.gripper_L,) = _get_struct_18f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18f = None
def _get_struct_18f():
    global _struct_18f
    if _struct_18f is None:
        _struct_18f = struct.Struct("<18f")
    return _struct_18f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dual_arm_control/robotResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robotResponse(genpy.Message):
  _md5sum = "af6d3a99f0fbeb66d3248fa4b3e675fb"
  _type = "dual_arm_control/robotResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string state

"""
  __slots__ = ['state']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robotResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = ''
    else:
      self.state = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class robot(object):
  _type          = 'dual_arm_control/robot'
  _md5sum = '302798b026bfb5b41c3f90f1e942eb92'
  _request_class  = robotRequest
  _response_class = robotResponse
