# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from linear_motion/LM_Cmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LM_Cmd(genpy.Message):
  _md5sum = "8a5050a3fcf89f1ce1c712656c2d84a1"
  _type = "linear_motion/LM_Cmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id

int32 x
int32 z
int32 left

int32 x_curr_pos
int32 z_curr_pos
int32 left_curr_pos

bool is_busy
string status """
  __slots__ = ['id','x','z','left','x_curr_pos','z_curr_pos','left_curr_pos','is_busy','status']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,x,z,left,x_curr_pos,z_curr_pos,left_curr_pos,is_busy,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LM_Cmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.x is None:
        self.x = 0
      if self.z is None:
        self.z = 0
      if self.left is None:
        self.left = 0
      if self.x_curr_pos is None:
        self.x_curr_pos = 0
      if self.z_curr_pos is None:
        self.z_curr_pos = 0
      if self.left_curr_pos is None:
        self.left_curr_pos = 0
      if self.is_busy is None:
        self.is_busy = False
      if self.status is None:
        self.status = ''
    else:
      self.id = 0
      self.x = 0
      self.z = 0
      self.left = 0
      self.x_curr_pos = 0
      self.z_curr_pos = 0
      self.left_curr_pos = 0
      self.is_busy = False
      self.status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7iB().pack(_x.id, _x.x, _x.z, _x.left, _x.x_curr_pos, _x.z_curr_pos, _x.left_curr_pos, _x.is_busy))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.id, _x.x, _x.z, _x.left, _x.x_curr_pos, _x.z_curr_pos, _x.left_curr_pos, _x.is_busy,) = _get_struct_7iB().unpack(str[start:end])
      self.is_busy = bool(self.is_busy)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7iB().pack(_x.id, _x.x, _x.z, _x.left, _x.x_curr_pos, _x.z_curr_pos, _x.left_curr_pos, _x.is_busy))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.id, _x.x, _x.z, _x.left, _x.x_curr_pos, _x.z_curr_pos, _x.left_curr_pos, _x.is_busy,) = _get_struct_7iB().unpack(str[start:end])
      self.is_busy = bool(self.is_busy)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7iB = None
def _get_struct_7iB():
    global _struct_7iB
    if _struct_7iB is None:
        _struct_7iB = struct.Struct("<7iB")
    return _struct_7iB
