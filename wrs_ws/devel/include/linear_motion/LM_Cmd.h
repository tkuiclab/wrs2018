// Generated by gencpp from file linear_motion/LM_Cmd.msg
// DO NOT EDIT!


#ifndef LINEAR_MOTION_MESSAGE_LM_CMD_H
#define LINEAR_MOTION_MESSAGE_LM_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace linear_motion
{
template <class ContainerAllocator>
struct LM_Cmd_
{
  typedef LM_Cmd_<ContainerAllocator> Type;

  LM_Cmd_()
    : id(0)
    , x(0)
    , z(0)
    , left(0)
    , x_curr_pos(0)
    , z_curr_pos(0)
    , left_curr_pos(0)
    , is_busy(false)
    , status()  {
    }
  LM_Cmd_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0)
    , z(0)
    , left(0)
    , x_curr_pos(0)
    , z_curr_pos(0)
    , left_curr_pos(0)
    , is_busy(false)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _z_type;
  _z_type z;

   typedef int32_t _left_type;
  _left_type left;

   typedef int32_t _x_curr_pos_type;
  _x_curr_pos_type x_curr_pos;

   typedef int32_t _z_curr_pos_type;
  _z_curr_pos_type z_curr_pos;

   typedef int32_t _left_curr_pos_type;
  _left_curr_pos_type left_curr_pos;

   typedef uint8_t _is_busy_type;
  _is_busy_type is_busy;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::linear_motion::LM_Cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::linear_motion::LM_Cmd_<ContainerAllocator> const> ConstPtr;

}; // struct LM_Cmd_

typedef ::linear_motion::LM_Cmd_<std::allocator<void> > LM_Cmd;

typedef boost::shared_ptr< ::linear_motion::LM_Cmd > LM_CmdPtr;
typedef boost::shared_ptr< ::linear_motion::LM_Cmd const> LM_CmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::linear_motion::LM_Cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::linear_motion::LM_Cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace linear_motion

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'linear_motion': ['/home/andy/wrs_ws/src/linear_motion/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::linear_motion::LM_Cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::linear_motion::LM_Cmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::linear_motion::LM_Cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::linear_motion::LM_Cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::linear_motion::LM_Cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::linear_motion::LM_Cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::linear_motion::LM_Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a5050a3fcf89f1ce1c712656c2d84a1";
  }

  static const char* value(const ::linear_motion::LM_Cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a5050a3fcf89f1cULL;
  static const uint64_t static_value2 = 0xe1c712656c2d84a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::linear_motion::LM_Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "linear_motion/LM_Cmd";
  }

  static const char* value(const ::linear_motion::LM_Cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::linear_motion::LM_Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
\n\
int32 x\n\
int32 z\n\
int32 left\n\
\n\
int32 x_curr_pos\n\
int32 z_curr_pos\n\
int32 left_curr_pos\n\
\n\
bool is_busy\n\
string status \n\
";
  }

  static const char* value(const ::linear_motion::LM_Cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::linear_motion::LM_Cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.z);
      stream.next(m.left);
      stream.next(m.x_curr_pos);
      stream.next(m.z_curr_pos);
      stream.next(m.left_curr_pos);
      stream.next(m.is_busy);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LM_Cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::linear_motion::LM_Cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::linear_motion::LM_Cmd_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.z);
    s << indent << "left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left);
    s << indent << "x_curr_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_curr_pos);
    s << indent << "z_curr_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.z_curr_pos);
    s << indent << "left_curr_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_curr_pos);
    s << indent << "is_busy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_busy);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINEAR_MOTION_MESSAGE_LM_CMD_H
