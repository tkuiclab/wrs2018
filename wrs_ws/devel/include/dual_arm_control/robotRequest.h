// Generated by gencpp from file dual_arm_control/robotRequest.msg
// DO NOT EDIT!


#ifndef DUAL_ARM_CONTROL_MESSAGE_ROBOTREQUEST_H
#define DUAL_ARM_CONTROL_MESSAGE_ROBOTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dual_arm_control
{
template <class ContainerAllocator>
struct robotRequest_
{
  typedef robotRequest_<ContainerAllocator> Type;

  robotRequest_()
    : slide_R(0.0)
    , joint1_R(0.0)
    , joint2_R(0.0)
    , joint3_R(0.0)
    , joint4_R(0.0)
    , joint5_R(0.0)
    , joint6_R(0.0)
    , joint7_R(0.0)
    , gripper_R(0.0)
    , slide_L(0.0)
    , joint1_L(0.0)
    , joint2_L(0.0)
    , joint3_L(0.0)
    , joint4_L(0.0)
    , joint5_L(0.0)
    , joint6_L(0.0)
    , joint7_L(0.0)
    , gripper_L(0.0)  {
    }
  robotRequest_(const ContainerAllocator& _alloc)
    : slide_R(0.0)
    , joint1_R(0.0)
    , joint2_R(0.0)
    , joint3_R(0.0)
    , joint4_R(0.0)
    , joint5_R(0.0)
    , joint6_R(0.0)
    , joint7_R(0.0)
    , gripper_R(0.0)
    , slide_L(0.0)
    , joint1_L(0.0)
    , joint2_L(0.0)
    , joint3_L(0.0)
    , joint4_L(0.0)
    , joint5_L(0.0)
    , joint6_L(0.0)
    , joint7_L(0.0)
    , gripper_L(0.0)  {
  (void)_alloc;
    }



   typedef float _slide_R_type;
  _slide_R_type slide_R;

   typedef float _joint1_R_type;
  _joint1_R_type joint1_R;

   typedef float _joint2_R_type;
  _joint2_R_type joint2_R;

   typedef float _joint3_R_type;
  _joint3_R_type joint3_R;

   typedef float _joint4_R_type;
  _joint4_R_type joint4_R;

   typedef float _joint5_R_type;
  _joint5_R_type joint5_R;

   typedef float _joint6_R_type;
  _joint6_R_type joint6_R;

   typedef float _joint7_R_type;
  _joint7_R_type joint7_R;

   typedef float _gripper_R_type;
  _gripper_R_type gripper_R;

   typedef float _slide_L_type;
  _slide_L_type slide_L;

   typedef float _joint1_L_type;
  _joint1_L_type joint1_L;

   typedef float _joint2_L_type;
  _joint2_L_type joint2_L;

   typedef float _joint3_L_type;
  _joint3_L_type joint3_L;

   typedef float _joint4_L_type;
  _joint4_L_type joint4_L;

   typedef float _joint5_L_type;
  _joint5_L_type joint5_L;

   typedef float _joint6_L_type;
  _joint6_L_type joint6_L;

   typedef float _joint7_L_type;
  _joint7_L_type joint7_L;

   typedef float _gripper_L_type;
  _gripper_L_type gripper_L;





  typedef boost::shared_ptr< ::dual_arm_control::robotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dual_arm_control::robotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct robotRequest_

typedef ::dual_arm_control::robotRequest_<std::allocator<void> > robotRequest;

typedef boost::shared_ptr< ::dual_arm_control::robotRequest > robotRequestPtr;
typedef boost::shared_ptr< ::dual_arm_control::robotRequest const> robotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dual_arm_control::robotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dual_arm_control::robotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dual_arm_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'dual_arm_control': ['/home/andy/wrs_ws/src/wrs_gazebo/dual_arm_control/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dual_arm_control::robotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dual_arm_control::robotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dual_arm_control::robotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dual_arm_control::robotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dual_arm_control::robotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dual_arm_control::robotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dual_arm_control::robotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb58b233829e057866371dd14661701c";
  }

  static const char* value(const ::dual_arm_control::robotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb58b233829e0578ULL;
  static const uint64_t static_value2 = 0x66371dd14661701cULL;
};

template<class ContainerAllocator>
struct DataType< ::dual_arm_control::robotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dual_arm_control/robotRequest";
  }

  static const char* value(const ::dual_arm_control::robotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dual_arm_control::robotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 slide_R\n\
float32 joint1_R\n\
float32 joint2_R\n\
float32 joint3_R\n\
float32 joint4_R\n\
float32 joint5_R\n\
float32 joint6_R\n\
float32 joint7_R\n\
float32 gripper_R\n\
float32 slide_L\n\
float32 joint1_L\n\
float32 joint2_L\n\
float32 joint3_L\n\
float32 joint4_L\n\
float32 joint5_L\n\
float32 joint6_L\n\
float32 joint7_L\n\
float32 gripper_L\n\
";
  }

  static const char* value(const ::dual_arm_control::robotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dual_arm_control::robotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.slide_R);
      stream.next(m.joint1_R);
      stream.next(m.joint2_R);
      stream.next(m.joint3_R);
      stream.next(m.joint4_R);
      stream.next(m.joint5_R);
      stream.next(m.joint6_R);
      stream.next(m.joint7_R);
      stream.next(m.gripper_R);
      stream.next(m.slide_L);
      stream.next(m.joint1_L);
      stream.next(m.joint2_L);
      stream.next(m.joint3_L);
      stream.next(m.joint4_L);
      stream.next(m.joint5_L);
      stream.next(m.joint6_L);
      stream.next(m.joint7_L);
      stream.next(m.gripper_L);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dual_arm_control::robotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dual_arm_control::robotRequest_<ContainerAllocator>& v)
  {
    s << indent << "slide_R: ";
    Printer<float>::stream(s, indent + "  ", v.slide_R);
    s << indent << "joint1_R: ";
    Printer<float>::stream(s, indent + "  ", v.joint1_R);
    s << indent << "joint2_R: ";
    Printer<float>::stream(s, indent + "  ", v.joint2_R);
    s << indent << "joint3_R: ";
    Printer<float>::stream(s, indent + "  ", v.joint3_R);
    s << indent << "joint4_R: ";
    Printer<float>::stream(s, indent + "  ", v.joint4_R);
    s << indent << "joint5_R: ";
    Printer<float>::stream(s, indent + "  ", v.joint5_R);
    s << indent << "joint6_R: ";
    Printer<float>::stream(s, indent + "  ", v.joint6_R);
    s << indent << "joint7_R: ";
    Printer<float>::stream(s, indent + "  ", v.joint7_R);
    s << indent << "gripper_R: ";
    Printer<float>::stream(s, indent + "  ", v.gripper_R);
    s << indent << "slide_L: ";
    Printer<float>::stream(s, indent + "  ", v.slide_L);
    s << indent << "joint1_L: ";
    Printer<float>::stream(s, indent + "  ", v.joint1_L);
    s << indent << "joint2_L: ";
    Printer<float>::stream(s, indent + "  ", v.joint2_L);
    s << indent << "joint3_L: ";
    Printer<float>::stream(s, indent + "  ", v.joint3_L);
    s << indent << "joint4_L: ";
    Printer<float>::stream(s, indent + "  ", v.joint4_L);
    s << indent << "joint5_L: ";
    Printer<float>::stream(s, indent + "  ", v.joint5_L);
    s << indent << "joint6_L: ";
    Printer<float>::stream(s, indent + "  ", v.joint6_L);
    s << indent << "joint7_L: ";
    Printer<float>::stream(s, indent + "  ", v.joint7_L);
    s << indent << "gripper_L: ";
    Printer<float>::stream(s, indent + "  ", v.gripper_L);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUAL_ARM_CONTROL_MESSAGE_ROBOTREQUEST_H
