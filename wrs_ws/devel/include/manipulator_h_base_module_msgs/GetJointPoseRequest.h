// Generated by gencpp from file manipulator_h_base_module_msgs/GetJointPoseRequest.msg
// DO NOT EDIT!


#ifndef MANIPULATOR_H_BASE_MODULE_MSGS_MESSAGE_GETJOINTPOSEREQUEST_H
#define MANIPULATOR_H_BASE_MODULE_MSGS_MESSAGE_GETJOINTPOSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace manipulator_h_base_module_msgs
{
template <class ContainerAllocator>
struct GetJointPoseRequest_
{
  typedef GetJointPoseRequest_<ContainerAllocator> Type;

  GetJointPoseRequest_()
    : joint_name()  {
    }
  GetJointPoseRequest_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_name_type;
  _joint_name_type joint_name;





  typedef boost::shared_ptr< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetJointPoseRequest_

typedef ::manipulator_h_base_module_msgs::GetJointPoseRequest_<std::allocator<void> > GetJointPoseRequest;

typedef boost::shared_ptr< ::manipulator_h_base_module_msgs::GetJointPoseRequest > GetJointPoseRequestPtr;
typedef boost::shared_ptr< ::manipulator_h_base_module_msgs::GetJointPoseRequest const> GetJointPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace manipulator_h_base_module_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'manipulator_h_base_module_msgs': ['/home/andy/wrs_ws/src/ROBOTIS/ROBOTIS-MANIPULATOR-H/manipulator_h_base_module_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01d1dab1fc816c24d1eda912a6b60345";
  }

  static const char* value(const ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01d1dab1fc816c24ULL;
  static const uint64_t static_value2 = 0xd1eda912a6b60345ULL;
};

template<class ContainerAllocator>
struct DataType< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manipulator_h_base_module_msgs/GetJointPoseRequest";
  }

  static const char* value(const ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[]    joint_name\n\
";
  }

  static const char* value(const ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetJointPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manipulator_h_base_module_msgs::GetJointPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_name[]" << std::endl;
    for (size_t i = 0; i < v.joint_name.size(); ++i)
    {
      s << indent << "  joint_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANIPULATOR_H_BASE_MODULE_MSGS_MESSAGE_GETJOINTPOSEREQUEST_H
